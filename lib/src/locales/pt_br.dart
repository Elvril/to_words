import '../interfaces/locale.dart';
import '../models/currency_options.dart';
import '../models/locale_config.dart';
import '../models/number_word_map.dart';

class LocalePtBr implements Locale {
  @override
  final LocaleConfig config = const LocaleConfig(
    currency: CurrencyOptions(
      name: 'Real',
      plural: 'Reais',
      singular: 'Real',
      symbol: 'R\$',
      fractionalUnit: FractionalUnit(
        name: 'Centavo',
        singular: 'Centavo',
        plural: 'Centavos',
        symbol: '',
      ),
    ),
    texts: LocaleTexts(
      and: 'E',
      minus: 'Menos',
      only: '',
      point: 'Vírgula',
    ),
    numberWordsMapping: [
      NumberWordMap(number: 1000000000000000, value: 'Quadrilhões'),
      NumberWordMap(number: 1000000000000, value: 'Trilhões'),
      NumberWordMap(number: 1000000000, value: 'Bilhões'),
      NumberWordMap(number: 1000000, value: 'Milhões'),
      NumberWordMap(number: 1000, value: 'Mil'),
      NumberWordMap(number: 900, value: 'Novecentos'),
      NumberWordMap(number: 800, value: 'Oitocentos'),
      NumberWordMap(number: 700, value: 'Setecentos'),
      NumberWordMap(number: 600, value: 'Seiscentos'),
      NumberWordMap(number: 500, value: 'Quinhentos'),
      NumberWordMap(number: 400, value: 'Quatrocentos'),
      NumberWordMap(number: 300, value: 'Trezentos'),
      NumberWordMap(number: 200, value: 'Duzentos'),
      NumberWordMap(number: 100, value: 'Cento'),
      NumberWordMap(number: 90, value: 'Noventa'),
      NumberWordMap(number: 80, value: 'Oitenta'),
      NumberWordMap(number: 70, value: 'Setenta'),
      NumberWordMap(number: 60, value: 'Sessenta'),
      NumberWordMap(number: 50, value: 'Cinquenta'),
      NumberWordMap(number: 40, value: 'Quarenta'),
      NumberWordMap(number: 30, value: 'Trinta'),
      NumberWordMap(number: 20, value: 'Vinte'),
      NumberWordMap(number: 19, value: 'Dezenove'),
      NumberWordMap(number: 18, value: 'Dezoito'),
      NumberWordMap(number: 17, value: 'Dezesete'),
      NumberWordMap(number: 16, value: 'Dezesseis'),
      NumberWordMap(number: 15, value: 'Quinze'),
      NumberWordMap(number: 14, value: 'Quatorze'),
      NumberWordMap(number: 13, value: 'Treze'),
      NumberWordMap(number: 12, value: 'Doze'),
      NumberWordMap(number: 11, value: 'Onze'),
      NumberWordMap(number: 10, value: 'Dez'),
      NumberWordMap(number: 9, value: 'Nove'),
      NumberWordMap(number: 8, value: 'Oito'),
      NumberWordMap(number: 7, value: 'Sete'),
      NumberWordMap(number: 6, value: 'Seis'),
      NumberWordMap(number: 5, value: 'Cinco'),
      NumberWordMap(number: 4, value: 'Quatro'),
      NumberWordMap(number: 3, value: 'Três'),
      NumberWordMap(number: 2, value: 'Dois'),
      NumberWordMap(number: 1, value: 'Um'),
      NumberWordMap(number: 0, value: 'Zero'),
    ],
    exactWordsMapping: [
      NumberWordMap(number: 100, value: 'Cem'),
      NumberWordMap(number: 1000000000000000, value: 'Um Quadrilhão'),
      NumberWordMap(number: 1000000000000, value: 'Um Trilhão'),
      NumberWordMap(number: 1000000000, value: 'Um Bilhão'),
      NumberWordMap(number: 1000000, value: 'Um Milhão'),
    ],
    ignoreOneForWords: [
      'Mil',
      'Novecentos',
      'Oitocentos',
      'Setecentos',
      'Seiscentos',
      'Quinhentos',
      'Quatrocentos',
      'Trezentos',
      'Duzentos',
      'Cento',
    ],
    splitWord: 'E',
    noSplitWordAfter: [
      'Mil',
      'Milhões',
      'Bilhões',
      'Trilhões',
      'Quadrilhões',
    ],
  );
}
